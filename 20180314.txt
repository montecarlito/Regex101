SED

#Search & Replace will act once per line unless you end with /g
	sed 's/n/Q/g' filename = Substitute n with Q Globally
	sed 's/\s//g' fn = Sub spaces with nothing Globally
	sed 's/[0-9]/X/' fn = Sub any single number
	sed -r 's/[0-9]{4}/XXXX/' fn = (Extended Mode) Sub any 4-digit number with quadX's
	sed -r 's+[0-9]{2}/[0-9]{2}/[0-9]{4}+MM/DD/YYYY+g' filename = replaces all dates on 			every line in that format with MM/DD/YYYY
	sed -r 's+([0-9]{2})/([0-9]{2})/([0-9]{4})+\3-\1-\2+g' filename = recalls what was 			replaced in () and revives it, but in this case it changes the group order 			to YYYY/MM/DD
	sed -r '/word/d' filename = deletes line(s) with word in it


AWK (is a programming language but can be used in part with bash)

#AWK uses whitespace whereas CUT won't
	awk -F, '{print $1, $2}' filename = '-F' for 'fields' with comma field separator
	awk -F: '{print $1, $4}' /etc/passwd | head -4 = pulls fields 1&4 from that file but 		just the first 4 lines; TAIL for the last x lines

[[]] represents test or condition
(()) represents expression such as arithmetic but doesn't assign an output w/o $ in front or echo $? after it

printf "Hello %s\n" "$1"
date
echo  `date`
echo $(date)
today=$(date)
echo $today
if (( 1==2 ))
 then
  echo "Oh no"
 else
  echo "Yay"
 fi

if (( 1==2 )); then  echo "Oh no"; else  echo "Yay"; fi
[ "abc" == "abc" ]; echo $? #0 (true)
[ "abc" == "def" ]; echo $? #1 (false)
[ "abc" != "def" ]; echo $? #0 (true)

[[ '11' < '5' ]]; echo $? #compares 1 (first char) to 5
[[ 11 -lt 5 ]]; echo $? #logical comparison
if [[ 11 -ge 5 ]]; then echo "Yes"; else echo "No"; fi #using >/=

[[ -e file.txt ]]; echo $? #does file.txt EXIST?
if [[ -d file.txt ]]; then echo "Yes"; else echo "No"; fi # test for DIR
if [[ -r file.txt ]]; then echo "Yes"; else echo "No"; fi # test for READABLE
if [[ -x file.txt ]]; then echo "Yes"; else echo "No"; fi # test for EXE
if [[ ! -x file.txt ]]; then echo "Yes"; else echo "No"; fi #Negation test for EXE

echo {1..3} #1 2 3
echo {a..c} #a b c

for var in {1..10}; do  echo -n $var; done #12345678910 (-n removes spaces)

(grep WORD file.txt); echo $? #resulting in 0 or 1

if [[ "abc" =~ (.)b(.) ]]; then echo "Yes"; fi 
echo "${BASH_REMATCH[1]}" #will echo a because the first dot (group1) will match anything
echo "${BASH_REMATCH[2]}" #will echo c because the other dot (group2) will match anything
echo "${BASH_REMATCH[0]}" #will echo abc